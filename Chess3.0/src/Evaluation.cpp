#include"Evaluation.h"

float weight = 0.05;

float pawntable[2][64] = {
{0, 0, 0, 0, 0, 0, 0, 0,
50, 50, 50, 50, 50, 50, 50, 50,
10, 10, 20, 30, 30, 20, 10, 10,
5, 5, 10, 25, 25, 10, 5, 5,
0, 0, 0, 20, 20, 0, 0, 0,
5, -5, -10, 0, 0, -10, -5, 5,
5, 10, 10, -20, -20, 10, 10, 5,
0, 0, 0, 0, 0, 0, 0, 0},
{ 0, 0, 0, 0, 0, 0, 0, 0,
5, 10, 10, -20, -20, 10, 10, 5,
5, -5, -10, 0, 0, -10, -5, 5,
0, 0, 0, 20, 20, 0, 0, 0,
5, 5, 10, 25, 25, 10, 5, 5,
10, 10, 20, 30, 30, 20, 10, 10,
50, 50, 50, 50, 50, 50, 50, 50,
0, 0, 0, 0, 0, 0, 0, 0 } };

float knightstable[64] = { -50, -40, -30, -30, -30, -30, -40, -50,
-40, -20, 0, 5, 5, 0, -20, -40,
-30, 5, 10, 15, 15, 10, 5, -30,
-30, 0, 15, 20, 20, 15, 0, -30,
-30, 5, 15, 20, 20, 15, 5, -30,
-30, 0, 10, 15, 15, 10, 0, -30,
-40, -20, 0, 0, 0, 0, -20, -40,
-50, -40, -30, -30, -30, -30, -40, -50 };

float bishopstable[2][64] = { { -20, -10, -10, -10, -10, -10, -10, -20,
-10, 5, 0, 0, 0, 0, 5, -10,
-10, 10, 10, 10, 10, 10, 10, -10,
-10, 0, 10, 10, 10, 10, 0, -10,
-10, 5, 5, 10, 10, 5, 5, -10,
-10, 0, 5, 10, 10, 5, 0, -10,
-10, 0, 0, 0, 0, 0, 0, -10,
-20, -10, -10, -10, -10, -10, -10, -20 },
{ -20, -10, -10, -10, -10, -10, -10, -20,
-10, 0, 0, 0, 0, 0, 0, -10,
-10, 0, 5, 10, 10, 5, 0, -10,
-10, 5, 5, 10, 10, 5, 5, -10,
-10, 0, 10, 10, 10, 10, 0, -10,
-10, 10, 10, 10, 10, 10, 10, -10,
-10, 5, 0, 0, 0, 0, 5, -10,
-20, -10, -10, -10, -10, -10, -10, -20, } };

float rookstable[2][64] = { {0, 0, 0, 5, 5, 0, 0, 0,
-5, 0, 0, 0, 0, 0, 0, -5,
-5, 0, 0, 0, 0, 0, 0, -5,
-5, 0, 0, 0, 0, 0, 0, -5,
-5, 0, 0, 0, 0, 0, 0, -5,
-5, 0, 0, 0, 0, 0, 0, -5,
5, 10, 10, 10, 10, 10, 10, 5,
0, 0, 0, 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0, 0, 0, 0,
5, 10, 10, 10, 10, 10, 10, 5,
-5, 0, 0, 0, 0, 0, 0, -5,
-5, 0, 0, 0, 0, 0, 0, -5,
-5, 0, 0, 0, 0, 0, 0, -5,
-5, 0, 0, 0, 0, 0, 0, -5,
-5, 0, 0, 0, 0, 0, 0, -5,
0, 0, 0, 5, 5, 0, 0, 0} };

float queenstable[64] = { -20, -10, -10, -5, -5, -10, -10, -20,
-10, 0, 0, 0, 0, 0, 0, -10,
-10, 5, 5, 5, 5, 5, 0, -10,
0, 0, 5, 5, 5, 5, 0, -5,
-5, 0, 5, 5, 5, 5, 0, -5,
-10, 0, 5, 5, 5, 5, 0, -10,
-10, 0, 0, 0, 0, 0, 0, -10,
-20, -10, -10, -5, -5, -10, -10, -20 };

float kingstable[2][64] = { { 20, 30, 10, 0, 0, 10, 30, 20,
20, 20, 0, 0, 0, 0, 20, 20,
-10, -20, -20, -20, -20, -20, -20, -10,
-20, -30, -30, -40, -40, -30, -30, -20,
-30, -40, -40, -50, -50, -40, -40, -30,
-30, -40, -40, -50, -50, -40, -40, -30,
-30, -40, -40, -50, -50, -40, -40, -30,
-30, -40, -40, -50, -50, -40, -40, -30 },
{-30, -40, -40, -50, -50, -40, -40, -30,
-30, -40, -40, -50, -50, -40, -40, -30,
-30, -40, -40, -50, -50, -40, -40, -30,
-30, -40, -40, -50, -50, -40, -40, -30,
-20, -30, -30, -40, -40, -30, -30, -20,
-10, -20, -20, -20, -20, -20, -20, -10,
20, 20, 0, 0, 0, 0, 20, 20,
 20, 30, 10, 0, 0, 10, 30, 20} };

float evaluate(bool colour) {
	float score = 0;
	for (int i = 0; i < 64; i++) {
		if ((board.Occupancy >> i) & 1) {
			score += (((board.colours[colour] >> i) & 1) & ((board.Types[0] >> i) & 1)) * (1.0f + (pawntable[colour][i]) * weight);
			score -= (((board.colours[!colour] >> i) & 1) & ((board.Types[0] >> i) & 1)) * (1.0f + (pawntable[!colour][i]) * weight);

			score += (((board.colours[colour] >> i) & 1) & ((board.Types[1] >> i) & 1)) * (3.0f + (knightstable[i]) * weight);
			score -= (((board.colours[!colour] >> i) & 1) & ((board.Types[1] >> i) & 1)) * (3.0f + (knightstable[i]) * weight);

			score += (((board.colours[colour] >> i) & 1) & ((board.Types[2] >> i) & 1)) * (3.0f + (bishopstable[colour][i]) * weight);
			score -= (((board.colours[!colour] >> i) & 1) & ((board.Types[2] >> i) & 1)) * (3.0f + (bishopstable[!colour][i]) * weight);

			score += (((board.colours[colour] >> i) & 1) & ((board.Types[3] >> i) & 1)) * (5.0f + (rookstable[colour][i]) * weight);
			score -= (((board.colours[!colour] >> i) & 1) & ((board.Types[3] >> i) & 1)) * (5.0f + (rookstable[!colour][i]) * weight);

			score += (((board.colours[colour] >> i) & 1) & ((board.Types[4] >> i) & 1)) * (5.0f + (queenstable[i]) * weight);
			score -= (((board.colours[!colour] >> i) & 1) & ((board.Types[4] >> i) & 1)) * (5.0f + (queenstable[i]) * weight);

			score += (((board.colours[colour] >> i) & 1) & ((board.Types[5] >> i) & 1)) * (1000.0f + (kingstable[colour][i]) * weight);
			score -= (((board.colours[!colour] >> i) & 1) & ((board.Types[5] >> i) & 1)) * (1000.0f + (kingstable[!colour][i]) * weight);
		}
	}
	return score;
}